{% extends 'base.twig' %}

{% block title %}Ticket Management - TicketApp{% endblock %}

{% block header %}
<nav class="bg-white shadow-sm border-b border-gray-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
            <div class="flex items-center min-w-0 flex-1">
                <a href="./dashboard.html" class="text-xl sm:text-2xl font-bold text-primary-600 truncate">TicketApp</a>
            </div>
            <div class="hidden md:flex items-center space-x-4">
                <span id="userName" class="text-gray-700"></span>
                <a href="./dashboard.html" class="text-gray-600 hover:text-primary-600 transition-colors duration-200">Dashboard</a>
                <button onclick="handleLogout()" class="btn-secondary">Logout</button>
            </div>
            <div class="md:hidden">
                <button onclick="handleLogout()" class="btn-secondary">Logout</button>
            </div>
        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Page Header -->
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">
            <div class="flex-1 min-w-0">
                <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">Ticket Management</h1>
                <p class="mt-2 text-gray-600">Create, view, edit, and delete tickets</p>
            </div>
            <div>
                <button onclick="openModal()" class="btn-primary w-full sm:w-auto whitespace-nowrap">Create Ticket</button>
            </div>
        </div>

        <!-- Tickets Grid -->
        <div id="emptyState" class="text-center py-12 hidden">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No tickets</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by creating a new ticket.</p>
            <div class="mt-6">
                <button onclick="openModal()" class="btn-primary">Create Ticket</button>
            </div>
        </div>

        <div id="ticketsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
    </div>
</div>

<!-- Modal -->
<div id="ticketModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 id="modalTitle" class="text-lg font-medium text-gray-900 mb-4"></h3>
            <form id="ticketForm" class="space-y-4">
                <input type="hidden" id="ticketId">
                
                <div>
                    <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
                    <input type="text" id="title" required class="input-field" placeholder="Enter ticket title">
                    <p id="title-error" class="mt-1 text-sm text-danger-600 hidden"></p>
                </div>

                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="description" rows="3" class="input-field" placeholder="Enter ticket description"></textarea>
                </div>

                <div>
                    <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status *</label>
                    <select id="status" class="input-field">
                        <option value="open">Open</option>
                        <option value="in_progress">In Progress</option>
                        <option value="closed">Closed</option>
                    </select>
                    <p id="status-error" class="mt-1 text-sm text-danger-600 hidden"></p>
                </div>

                <div>
                    <label for="priority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                    <select id="priority" class="input-field">
                        <option value="low">Low</option>
                        <option value="medium" selected>Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>

                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="resetForm()" class="btn-secondary">Cancel</button>
                    <button type="submit" class="btn-primary">Save Ticket</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script type="module">
    import { auth, requireAuth } from './js/auth.js';
    import { tickets, getStatusColor, getPriorityColor } from './js/tickets.js';
    import { showToast } from './js/toast.js';
    import { v4 as uuidv4 } from 'https://cdn.skypack.dev/uuid';
    
    if (!requireAuth()) return;
    
    // Update user name
    const userName = document.getElementById('userName');
    if (auth.user) {
        userName.textContent = `Welcome, ${auth.user.name}`;
    }
    
    let editingTicket = null;
    
    function loadTickets() {
        const ticketsList = tickets.getAll();
        const grid = document.getElementById('ticketsGrid');
        const emptyState = document.getElementById('emptyState');
        
        if (ticketsList.length === 0) {
            emptyState.classList.remove('hidden');
            grid.classList.add('hidden');
        } else {
            emptyState.classList.add('hidden');
            grid.classList.remove('hidden');
            
            grid.innerHTML = ticketsList.map(ticket => `
                <div class="card hover:shadow-xl transition-shadow duration-300">
                    <div class="flex justify-between items-start mb-4">
                        <h3 class="text-lg font-semibold text-gray-900 line-clamp-2">${ticket.title}</h3>
                        <div class="flex space-x-2">
                            <button onclick="editTicket('${ticket.id}')" class="text-primary-600 hover:text-primary-800">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                            </button>
                            <button onclick="deleteTicket('${ticket.id}')" class="text-danger-600 hover:text-danger-800">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    ${ticket.description ? `<p class="text-gray-600 text-sm mb-4 line-clamp-3">${ticket.description}</p>` : ''}
                    <div class="flex items-center justify-between mb-4">
                        <span class="px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(ticket.status)}">
                            ${ticket.status.replace('_', ' ')}
                        </span>
                        <span class="px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(ticket.priority)}">
                            ${ticket.priority}
                        </span>
                    </div>
                    <div class="text-xs text-gray-500">
                        <p>Created: ${new Date(ticket.createdAt).toLocaleDateString()}</p>
                        <p>Updated: ${new Date(ticket.updatedAt).toLocaleDateString()}</p>
                    </div>
                </div>
            `).join('');
        }
    }
    
    window.editTicket = (ticketId) => {
        editingTicket = tickets.getTicket(ticketId);
        document.getElementById('modalTitle').textContent = 'Edit Ticket';
        document.getElementById('ticketId').value = editingTicket.id;
        document.getElementById('title').value = editingTicket.title;
        document.getElementById('description').value = editingTicket.description;
        document.getElementById('status').value = editingTicket.status;
        document.getElementById('priority').value = editingTicket.priority;
        document.getElementById('ticketModal').classList.remove('hidden');
    };
    
    window.deleteTicket = (ticketId) => {
        if (confirm('Are you sure you want to delete this ticket?')) {
            tickets.deleteTicket(ticketId);
            showToast('Ticket deleted successfully!', 'success');
            loadTickets();
        }
    };
    
    window.openModal = () => {
        editingTicket = null;
        document.getElementById('modalTitle').textContent = 'Create New Ticket';
        resetForm();
        document.getElementById('ticketModal').classList.remove('hidden');
    };
    
    window.resetForm = () => {
        document.getElementById('ticketForm').reset();
        document.getElementById('ticketId').value = '';
        document.getElementById('status').value = 'open';
        document.getElementById('priority').value = 'medium';
        editingTicket = null;
        document.getElementById('ticketModal').classList.add('hidden');
    };
    
    document.getElementById('ticketForm').addEventListener('submit', (e) => {
        e.preventDefault();
        
        const title = document.getElementById('title').value;
        const description = document.getElementById('description').value;
        const status = document.getElementById('status').value;
        const priority = document.getElementById('priority').value;
        
        if (!title.trim()) {
            showToast('Title is required', 'error');
            return;
        }
        
        const now = new Date().toISOString();
        
        if (editingTicket) {
            tickets.updateTicket(editingTicket.id, { title, description, status, priority, updatedAt: now });
            showToast('Ticket updated successfully!', 'success');
        } else {
            tickets.addTicket({ id: uuidv4(), title, description, status, priority, createdAt: now, updatedAt: now });
            showToast('Ticket created successfully!', 'success');
        }
        
        loadTickets();
        resetForm();
    });
    
    loadTickets();
</script>

<script>
function handleLogout() {
    import('./js/auth.js').then(({ auth }) => {
        auth.logout();
        setTimeout(() => {
            window.location.href = './index.html';
        }, 100);
    });
}
</script>
{% endblock %}

